#!/bin/bash
#  ____                    __            __
# /\  _`\                 /\ \__        /\ \__
# \ \ \L\ \    ___     ___\ \ ,_\   ____\ \ ,_\  _ __    __     _____
#  \ \  _ <'  / __`\  / __`\ \ \/  /',__\\ \ \/ /\`'__\/'__`\  /\ '__`\
#   \ \ \L\ \/\ \L\ \/\ \L\ \ \ \_/\__, `\\ \ \_\ \ \//\ \L\.\_\ \ \L\ \
#    \ \____/\ \____/\ \____/\ \__\/\____/ \ \__\\ \_\\ \__/.\_\\ \ ,__/
#     \/___/  \/___/  \/___/  \/__/\/___/   \/__/ \/_/ \/__/\/_/ \ \ \/
#                                                                 \ \_\
#                                                                  \/_/
set -eE -o functrace

RED='\033[0;31m'
NC='\033[0m'

failure() {
        local lineno=$1
        local msg=$2
        echo -e "${RED}ERROR:${NC} $lineno: $msg"
}
trap 'failure ${LINENO} "$BASH_COMMAND"' ERR

backup_dir() {
  TARGET_DIR=$1
  BACKUP_DIR=$2
  if [[ -d "$TARGET_DIR" ]]; then
    mkdir --parents "$BACKUP_DIR"
    mv "$TARGET_DIR" "$BACKUP_DIR"
  fi
}

bootstrap_debian() {
  sudo apt-get update
  xargs sudo apt-get -y install < "$DOTFILES_DIR"/pkglist
}

bootstrap_docker() {
  apt-get update
  xargs apt-get -y install < "$DOTFILES_DIR"/pkglist
  apt-get clean autoclean
  apt-get autoremove --yes
  rm -rf /var/lib/{apt,dpkg,cache,log}/
  locale-gen en_US.UTF-8
}

bootstrap_macos() {
  if ! type -P brew >/dev/null; then
    CI=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
  fi
  brew analytics off
  brew tap homebrew/cask-fonts
  brew bundle install
  defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false
  defaults write NSGlobalDomain KeyRepeat -int 2
  defaults write NSGlobalDomain InitialKeyRepeat -int 15
}

bootstrap_regolith() {
  curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
  sudo apt update
  xargs sudo apt-get -y install < "$DOTFILES_DIR"/pkglist
}


init_git() {
  rm -f ~/.git*
  stow_configuration git "$HOME"
}

init_hammerspoon() {
  rm -rf ~/.hammerspoon/Spoons/*
  mkdir -p ~/.hammerspoon/Spoons
  quiet_git clone https://github.com/jasonrudolph/ControlEscape.spoon.git ~/.hammerspoon/Spoons/ControlEscape.spoon
  stow_configuration hammerspoon "$HOME/.hammerspoon"
}

init_tmux() {
  rm -f "$HOME"/.tmux.conf
  rm -rf "$HOME"/.tmux
  stow_configuration tmux "$HOME"
  quiet_git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
}

init_regolith() {
    gsettings set org.gnome.desktop.input-sources xkb-options "['caps:ctrl_modifier']"
    REGOLITH_CONFIG_DIR="$HOME/.config/regolith"
    REGOLITH_CONFIG_DIR_BAK="$HOME/backup/$REGOLITH_CONFIG_DIR/$(date "+%s")"
    backup_dir "$REGOLITH_CONFIG_DIR" "$REGOLITH_CONFIG_DIR_BAK"
    mkdir --parents "$REGOLITH_CONFIG_DIR"
    stow_configuration regolith "$REGOLITH_CONFIG_DIR"
    rm -rf /tmp/FiraCode.zip
    curl -L -o /tmp/FiraCode.zip "https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/FiraCode.zip"
    unzip /tmp/FiraCode.zip -d ~/.fonts
    fc-cache -fvr
}

init_zsh() {
  rm -f "$HOME/.zsh*"
  rm -rf "$HOME/.zsh"
  rm -rf "$ZSH_ANTIGEN_DIR"
  stow_configuration zsh "$HOME"
	quiet_git clone https://github.com/zsh-users/antigen.git "$ZSH_ANTIGEN_DIR"
  dotfiles_export="export DOTFILES_DIR=$DOTFILES_DIR"
  if ! grep -q "$dotfiles_export" "$ZSH_LOCAL"; then
    echo "$dotfiles_export" >> "$ZSH_LOCAL"
  fi
  zsh -c "source ~/.zshrc"
  sudo chsh -s "$(which zsh)" "$(whoami)"
}

quiet_git() {
    stdout=$(mktemp)
    stderr=$(mktemp)

    if ! git "$@" </dev/null >"$stdout" 2>"$stderr"; then
        cat "$stderr" >&2
        rm -f "$stdout" "$stderr"
        exit 1
    fi

    rm -f "$stdout" "$stderr"
}

stow_configuration() {
  package="$1"
  target="$2"
  stow --dir="$DOTFILES_DIR" --target="$target" "$package"
}

main() {
  export DOTFILES_DIR="$HOME/.dotfiles"

  if [ "$(uname)" = "Darwin" ]; then
    echo "macos runtime detected"
    export DOTFILES_DIR="$HOME/ghq/github.com/nodeselector/dotfiles"

    # escalate prividges if not in CI
    if [ -z "${CI+x}" ]; then
      sudo -v
    fi

    bootstrap_macos
    init_hammerspoon

  elif [[ -n "$DESKTOP_SESSION" ]] && [[ "$DESKTOP_SESSION" = "regolith" ]]; then

    echo "regolith runtime detected"
    bootstrap_regolith
    init_regolith

  elif [ -n "${CODESPACES+x}" ]; then

    echo "codespaces runtime detected"
    export DOTFILES_DIR="/workspaces/.codespaces/.persistedshare/dotfiles"
    bootstrap_debian

  elif [ -n "${BP_DEV+x}" ]; then

    echo "bp-dev runtime detected"
    bootstrap_debian

  elif [[ ! $(cat /proc/1/sched | head -n 1 | grep init) ]]; then

    echo "docker runtime detected"
    bootstrap_docker

  else
    echo "Unknown runtime, send help."
    exit 1
  fi

  source "$DOTFILES_DIR/zsh/.zprofile"

  init_zsh
  init_git
  init_tmux
}

main
