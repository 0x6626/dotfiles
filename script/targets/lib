#!/bin/bash

n=$'\n'
RED='\033[0;31m'
ORANGE='\033[0;33m'
NC='\033[0m' # No Color

failure() {
  echo -e "${n}${n}😱 Oh dear, something broke!${NC}"
  echo -e "${n}${RED}[ERROR]\t${NC}$(tail -n 1 <"$1")"
  echo -e "${n}${ORANGE}[CALLSTACK]${n}"
  local frame=0
  while caller $frame >/dev/null; do
    IFS=' ' read -r -a array <<<"$(caller $frame)"
    echo -e "${ORANGE}[$frame] ${NC} ${array[1]} in ${array[2]}:${array[0]}"
    ((frame++))
  done

  touch /tmp/dotfiles.errors.log
  cat "$TMP_ERRS" >/tmp/dotfiles.errors.log
  echo -e "${n}🗄️  more logs are in /tmp/dotfiles-errors.log"
  exit 1
}

# shellcheck disable=SC2141 # TODO figure if needed
define() { IFS='\n' read -r -d '' "${1}" || true; }

stow_configuration() {
  local package=$1
  local target=$2

  shopt -u dotglob
  for entry in "$DOTFILES_DIR/$package/".*; do
    entry=$target/$(basename "$entry")
    if [[ -e "$entry" ]] && ! [[ -d "$entry" ]] && ! [[ -L "$entry" ]]; then
      echo "❗ $entry exists and is not a symlink, removing"
      rm -rf "$entry"
    fi
  done

  stow --dir="$DOTFILES_DIR" --target="$target" "$package"
}

setup_zsh() {
  local ZSH_ANTIGEN_DIR=$HOME/.antigen
  local ZSH_LOCAL=$HOME/.zshrc.local
  stow_configuration zsh "$HOME"
  if ! [[ -d "$ZSH_ANTIGEN_DIR" ]]; then
    rm -rf "$ZSH_ANTIGEN_DIR"
    git clone https://github.com/zsh-users/antigen.git "$ZSH_ANTIGEN_DIR"
  fi
  dotfiles_export="export DOTFILES_DIR=$DOTFILES_DIR"
  if ! grep -q "$dotfiles_export" "$ZSH_LOCAL"; then
    echo "$dotfiles_export" >>"$ZSH_LOCAL"
  fi
  zsh -c "source $HOME/.zshrc"
  sudo chsh -s "$(which zsh)" "$(whoami)" >/dev/null
}

setup_git() {
  rm -rf ~/.git*
  stow_configuration git "$HOME"
}

setup_tmux() {
  local TPM_DIR=$HOME/.tpm
  stow_configuration tmux "$HOME"
  if ! [[ -d "$TPM_DIR" ]]; then
    git clone https://github.com/tmux-plugins/tpm "$TPM_DIR"
  fi
}

setup_hammerspoon() {
  rm -rf ~/.hammerspoon/Spoons/*
  mkdir -p ~/.hammerspoon/Spoons
  git clone https://github.com/jasonrudolph/ControlEscape.spoon.git ~/.hammerspoon/Spoons/ControlEscape.spoon
  stow_configuration hammerspoon "$HOME/.hammerspoon"
}

validate_target_configuration() {
  local target=$2
  [[ $(type -t is_bootstrapped) == function ]] || (echo "🛑 is_bootstrapped function not found for $target, exiting" && exit 1)
  [[ $(type -t bootstrap) == function ]] || (echo "🛑 bootstrap function not found for $target, exiting" && exit 1)
  [[ $(type -t setup) == function ]] || (echo "🛑 setup function not found for $target, exiting" && exit 1)
  [[ -n $DOTFILES_DIR ]] || (echo "🛑 dotfiles directory not found for $target, exiting" && exit 1)
  [[ -d $DOTFILES_DIR ]] || (echo "🛑 dotfiles directory ($DOTFILES_DIR) not found $target, exiting" && exit 1)
}