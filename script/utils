#!/bin/bash

define() { IFS='\n' read -r -d '' ${1} || true; }

stow_configuration() {
  package="$1"
  target="$2"

  shopt -u dotglob
  for entry in "$DOTFILES_DIR/$package/".*; do
    entry=$target/$(basename "$entry")
    if [[ -e "$entry" ]] && ! [[ -d "$entry" ]] && ! [[ -L "$entry" ]]; then
      echo "❗ $entry exists and is not a symlink, removing"
      rm -rf $entry
    fi
  done

  stow --dir="$DOTFILES_DIR" --target="$target" "$package"
}

init_zsh() {
  export ZSH_ANTIGEN_DIR=$HOME/.antigen
  export ZSH_LOCAL=$HOME/.zshrc.local
  stow_configuration zsh "$HOME"
  if ! [[ -d "$ZSH_ANTIGEN_DIR" ]]; then
    rm -rf $ZSH_ANTIGEN_DIR
    git clone https://github.com/zsh-users/antigen.git "$ZSH_ANTIGEN_DIR"
  fi
  dotfiles_export="export DOTFILES_DIR=$DOTFILES_DIR"
  if ! grep -q "$dotfiles_export" "$ZSH_LOCAL"; then
    echo "$dotfiles_export" >>"$ZSH_LOCAL"
  fi
  zsh -c "source $HOME/.zshrc"
  sudo chsh -s "$(which zsh)" "$(whoami)"
}

init_git() {
  rm -rf ~/.git*
  stow_configuration git "$HOME"
}

init_tmux() {
  export TPM_DIR=$HOME/.tpm
  stow_configuration tmux "$HOME"
  if ! [[ -d "$TPM_DIR" ]]; then
    git clone https://github.com/tmux-plugins/tpm $TPM_DIR
  fi
  pip install --user tmuxp
}

validate_target_configuration() {
  [[ $(type -t is_bootstrapped) == function ]] || (echo "🛑 is_bootstrapped function not found for $TARGET, exiting" && exit 1)
  [[ $(type -t bootstrap) == function ]] || (echo "🛑 bootstrap function not found for $TARGET, exiting" && exit 1)
  [[ $(type -t setup) == function ]] || (echo "🛑 setup function not found for $TARGET, exiting" && exit 1)
  ! [[ -z $DOTFILES_DIR ]] || (echo "🛑 dotfiles directory not found for $TARGET, exiting" && exit 1)
  [[ -d $DOTFILES_DIR ]] || (echo "🛑 dotfiles directory ($DOTFILES_DIR) not found $TARGET, exiting" && exit 1) 
}