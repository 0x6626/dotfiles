#!/usr/bin/env bash

# shellcheck source=../lib/utils
source ./src/lib/utils

stow_configuration() {
  local package=$1
  local target=$2
  local package_dir=$DOTFILES_DIR/src/packages
  if help_arg "$1"; then
    echo "Usage: stow_configuration <package> <target>"
    echo "stows a package configuration file from PACKAGE_DIR to target directory"
    return
  fi

  stow_destroy_conflicts "$package_dir/$package" "$target"
  stow --dir="$package_dir" --target="$target" "$package"
}

restow_configuration() {
  local package=$1
  local target=$2
  local package_dir=$DOTFILES_DIR/src/packages
  if help_arg "$1"; then
    echo "Usage: restow_configuration <package> <target>"
    echo "restows a package configuration file from PACKAGE_DIR to target directory"
    return
  fi

  stow_destroy_conflicts "$package_dir/$package" "$target"
  stow -R --dir="$package_dir" --target="$target" "$package"
}

stow_destroy_conflicts() {
  local package_dir=$1
  local target=$2
  if help_arg "$1"; then
    echo "Usage: stow_destroy_conflicts <package_dir> <target>"
    echo "destroys files in target dir that are not symbolic links or directories"
    echo "this is a hacky way of dealing with an already existing file that avoid"
    echo "having to keep track of all possible file that could conflict with a stow"
    return
  fi
  shopt -u dotglob
  for entry in "/$package_dir/".*; do
    entry=$target/$(basename "$entry")
    if [[ -e "$entry" ]] && ! [[ -d "$entry" ]] && ! [[ -L "$entry" ]]; then
      echo "❗ $entry exists and is not a symlink, removing"
      rm -rf "$entry"
    fi
    if [ ! -e "$1" ] && [ -h "$1" ]; then
      echo "❗ $entry exists and but the link is broken, removing"
      rm -rf "$entry"
    fi
  done
}